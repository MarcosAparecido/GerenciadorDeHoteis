/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GerenciadorDeHoteis.Views;

import GerenciadorDeHoteis.Entity.Funcionario;
import GerenciadorDeHoteis.Entity.Hospede;
import GerenciadorDeHoteis.Entity.ProdutoEServico;
import GerenciadorDeHoteis.Entity.Quarto;
import GerenciadorDeHoteis.Service.TipoService;
import GerenciadorDeHoteis.Entity.Reserva;
import GerenciadorDeHoteis.Entity.ReservaDespesa;
import GerenciadorDeHoteis.Repository.TipoRepository;
import GerenciadorDeHoteis.Utils.DatasUtil;
import GerenciadorDeHoteis.Utils.FormatoStringUtil;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcos
 */
public class GerenciamentoCheckInCheckOut extends javax.swing.JFrame {

    private int idSelecionado = -1;
    private int idAcompanhanteSelecionado = -1;
    private TipoService tipoService = new TipoService();
    private static String cpfFuncionario;
    private static String cpfHospede;
    private static String passaporteHospede;
    boolean clikado = false;

    /**
     * Creates new form GerenciamentoDeQuarto
     */
    public GerenciamentoCheckInCheckOut(String cpfFuncionario, String cpfHospede, String passaporteHospede) {
        //verificarCpf(cpfFuncionario);
        this.cpfFuncionario = cpfFuncionario;
        this.cpfHospede = cpfHospede;
        this.passaporteHospede = passaporteHospede;
        setCpfFuncionario("333.333.333-33");
        initComponents();
        preencherAtualizarTabela();
        preencherComboBoxTipoQuarto();
        preencheComboBoxNomeQuarto();
        preencherComboBoxPesquisa();
        preencherAtualizarTabelaReserva();
        selecionarHospede();
        selecionarHospedeCheckOut();
        obtemDataCheckIn();
        obtemDataHoje();
        telaPesquisa.setSize(445, 450);
        telaCheckOut.setSize(820, 600);
        telaPesquisa.setLocationRelativeTo(null);
        telaCheckOut.setLocationRelativeTo(null);      
        this.setLocationRelativeTo(null);
        lblCPF.setText(cpfHospede);
        lblPassaporte.setText(passaporteHospede);
        cmbTipoQuarto.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        telaPesquisa = new javax.swing.JFrame();
        lblCampoPesquisa = new javax.swing.JLabel();
        lblValorPesquisa = new javax.swing.JLabel();
        cmbPesquisa = new javax.swing.JComboBox<>();
        txtValorPesquisa = new javax.swing.JTextField();
        bntPesquisar = new javax.swing.JButton();
        bntVoltar = new javax.swing.JButton();
        telaCheckOut = new javax.swing.JFrame();
        scpReserva = new javax.swing.JScrollPane();
        tbReserva = new javax.swing.JTable();
        lblPassaporteSelecionadoCheckOut = new javax.swing.JLabel();
        lblCpfSelecionadoCheckOut = new javax.swing.JLabel();
        lblHospedeSelecionadoCheckOut = new javax.swing.JLabel();
        lblPassporteCheckOut = new javax.swing.JLabel();
        lblCpfCheckOut = new javax.swing.JLabel();
        lblHospedeCheckOut = new javax.swing.JLabel();
        btnDesselecionarHospede = new javax.swing.JToggleButton();
        btnSairCheckOut = new javax.swing.JToggleButton();
        btnRealizarCheckOut = new javax.swing.JToggleButton();
        btnAtualizarCheckOut = new javax.swing.JToggleButton();
        lblNomeQuartoOculto = new javax.swing.JLabel();
        lblValorOculto = new javax.swing.JLabel();
        lblCheckInOculto = new javax.swing.JLabel();
        scpHospedes = new javax.swing.JScrollPane();
        tbHospedes = new javax.swing.JTable();
        scpAcompanhantes = new javax.swing.JScrollPane();
        tbAcompanhantes = new javax.swing.JTable();
        lblRealizaCheckInCheckOut = new javax.swing.JLabel();
        lblTipoQuarto = new javax.swing.JLabel();
        lblNumeroQuarto = new javax.swing.JLabel();
        lblNumeroHospede = new javax.swing.JLabel();
        lblDataCheckIn = new javax.swing.JLabel();
        lblValorDiaria = new javax.swing.JLabel();
        lblHospedeSelecionado = new javax.swing.JLabel();
        lblHospedeCpf = new javax.swing.JLabel();
        lblHospedePassaporte = new javax.swing.JLabel();
        cmbTipoQuarto = new javax.swing.JComboBox<>();
        cmbNomeQuarto = new javax.swing.JComboBox<>();
        txtNumeroHospedes = new javax.swing.JTextField();
        lblTxtDataCheckIn = new javax.swing.JLabel();
        lblTxtValorDiaria = new javax.swing.JLabel();
        lblHospede = new javax.swing.JLabel();
        lblCPF = new javax.swing.JLabel();
        lblPassaporte = new javax.swing.JLabel();
        bntRealizarCheckIn = new javax.swing.JButton();
        bntRealizarCheckOut = new javax.swing.JButton();
        bntPesquisaHospede = new javax.swing.JButton();
        bntDesselecionarHospede = new javax.swing.JButton();
        bntLimparCampos = new javax.swing.JButton();
        bntSair = new javax.swing.JButton();
        teste = new javax.swing.JToggleButton();
        lblData = new javax.swing.JLabel();
        lblDataHoje = new javax.swing.JLabel();
        lblAcompanhantes = new javax.swing.JLabel();
        lblHospedes = new javax.swing.JLabel();
        lblNomeHospede = new javax.swing.JLabel();
        btnLimparAcompanhantes = new javax.swing.JToggleButton();

        telaPesquisa.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCampoPesquisa.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblCampoPesquisa.setText("Campo Pesquisa :");
        telaPesquisa.getContentPane().add(lblCampoPesquisa, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, -1, -1));

        lblValorPesquisa.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblValorPesquisa.setText("Valor Pesquisa :");
        telaPesquisa.getContentPane().add(lblValorPesquisa, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, -1, -1));

        telaPesquisa.getContentPane().add(cmbPesquisa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 260, 30));
        telaPesquisa.getContentPane().add(txtValorPesquisa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 260, -1));

        bntPesquisar.setText("Pesquisar");
        bntPesquisar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPesquisarActionPerformed(evt);
            }
        });
        telaPesquisa.getContentPane().add(bntPesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 130, -1));

        bntVoltar.setText("Voltar");
        bntVoltar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntVoltarActionPerformed(evt);
            }
        });
        telaPesquisa.getContentPane().add(bntVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, 130, -1));

        telaCheckOut.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbReserva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hospede_id", "Nome", "CPF", "Passaporte", "Nº Hospede", "Nº Quarto", "Check-in", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scpReserva.setViewportView(tbReserva);

        telaCheckOut.getContentPane().add(scpReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 410));

        lblPassaporteSelecionadoCheckOut.setText("passporte");
        telaCheckOut.getContentPane().add(lblPassaporteSelecionadoCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 410, 180, -1));

        lblCpfSelecionadoCheckOut.setText("cpf");
        telaCheckOut.getContentPane().add(lblCpfSelecionadoCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 450, 190, 20));

        lblHospedeSelecionadoCheckOut.setText("nome");
        telaCheckOut.getContentPane().add(lblHospedeSelecionadoCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 420, 170, -1));

        lblPassporteCheckOut.setText("Passaporte Selecionado : ");
        telaCheckOut.getContentPane().add(lblPassporteCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 410, -1, -1));

        lblCpfCheckOut.setText("CPF Selecionado :");
        telaCheckOut.getContentPane().add(lblCpfCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 450, 110, 20));

        lblHospedeCheckOut.setText("Hospede Selecionado: ");
        telaCheckOut.getContentPane().add(lblHospedeCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, -1, -1));

        btnDesselecionarHospede.setText("Desselecionar Hospede");
        telaCheckOut.getContentPane().add(btnDesselecionarHospede, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, -1, -1));

        btnSairCheckOut.setText("Voltar");
        btnSairCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairCheckOutActionPerformed(evt);
            }
        });
        telaCheckOut.getContentPane().add(btnSairCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 530, 110, -1));

        btnRealizarCheckOut.setText("Realizar Check-out");
        btnRealizarCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarCheckOutActionPerformed(evt);
            }
        });
        telaCheckOut.getContentPane().add(btnRealizarCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 500, 170, -1));

        btnAtualizarCheckOut.setText("Atualizar");
        btnAtualizarCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarCheckOutActionPerformed(evt);
            }
        });
        telaCheckOut.getContentPane().add(btnAtualizarCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 340, 100, -1));

        lblNomeQuartoOculto.setText("jLabel1");

        lblValorOculto.setText("jLabel2");

        lblCheckInOculto.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1060, 850));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbHospedes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome Hospede", "CPF", "Passaporte"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scpHospedes.setViewportView(tbHospedes);
        if (tbHospedes.getColumnModel().getColumnCount() > 0) {
            tbHospedes.getColumnModel().getColumn(1).setResizable(false);
            tbHospedes.getColumnModel().getColumn(2).setResizable(false);
            tbHospedes.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(scpHospedes, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 460, 740));

        tbAcompanhantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "CPF", "Passaporte"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scpAcompanhantes.setViewportView(tbAcompanhantes);

        getContentPane().add(scpAcompanhantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 90, 410, 370));

        lblRealizaCheckInCheckOut.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        lblRealizaCheckInCheckOut.setText("Realizar Check-in / Check-out");
        getContentPane().add(lblRealizaCheckInCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 400, -1));

        lblTipoQuarto.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblTipoQuarto.setText("Tipo Quarto :");
        getContentPane().add(lblTipoQuarto, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 470, -1, 20));

        lblNumeroQuarto.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblNumeroQuarto.setText("Numero do Quarto :");
        getContentPane().add(lblNumeroQuarto, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 550, -1, -1));

        lblNumeroHospede.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblNumeroHospede.setText("Numero de Hospedes:");
        getContentPane().add(lblNumeroHospede, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 630, -1, -1));

        lblDataCheckIn.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblDataCheckIn.setText("Data Check-In :");
        getContentPane().add(lblDataCheckIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 470, -1, 30));

        lblValorDiaria.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblValorDiaria.setText("Valor Diaria :");
        getContentPane().add(lblValorDiaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 720, -1, 30));

        lblHospedeSelecionado.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblHospedeSelecionado.setText("Hospede Nome :");
        getContentPane().add(lblHospedeSelecionado, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 150, 140, -1));

        lblHospedeCpf.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblHospedeCpf.setText("Hospede CPF :");
        getContentPane().add(lblHospedeCpf, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 180, 130, 20));

        lblHospedePassaporte.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblHospedePassaporte.setText("Hospede Passaporte :");
        getContentPane().add(lblHospedePassaporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 210, 180, -1));

        cmbTipoQuarto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoQuartoActionPerformed(evt);
            }
        });
        getContentPane().add(cmbTipoQuarto, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 500, 260, 30));

        getContentPane().add(cmbNomeQuarto, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 580, 220, 30));
        getContentPane().add(txtNumeroHospedes, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 660, 270, -1));

        lblTxtDataCheckIn.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblTxtDataCheckIn.setText("data check-in");
        getContentPane().add(lblTxtDataCheckIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 500, 170, 30));

        lblTxtValorDiaria.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblTxtValorDiaria.setText("valor da diaria");
        getContentPane().add(lblTxtValorDiaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 750, 170, 30));

        lblHospede.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lblHospede.setText("nome");
        lblHospede.setToolTipText("");
        getContentPane().add(lblHospede, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 150, 320, 20));

        lblCPF.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lblCPF.setText("cpf");
        lblCPF.setToolTipText("");
        getContentPane().add(lblCPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 180, 330, -1));

        lblPassaporte.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lblPassaporte.setText("passaporte");
        lblPassaporte.setToolTipText("");
        getContentPane().add(lblPassaporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 210, 250, -1));

        bntRealizarCheckIn.setText("Fazer Check-in");
        bntRealizarCheckIn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntRealizarCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntRealizarCheckInActionPerformed(evt);
            }
        });
        getContentPane().add(bntRealizarCheckIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 620, 130, 50));

        bntRealizarCheckOut.setText("Realiza Check-out");
        bntRealizarCheckOut.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntRealizarCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntRealizarCheckOutActionPerformed(evt);
            }
        });
        getContentPane().add(bntRealizarCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 690, 130, 50));

        bntPesquisaHospede.setText("Pesquisar Hospede");
        bntPesquisaHospede.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntPesquisaHospede.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPesquisaHospedeActionPerformed(evt);
            }
        });
        getContentPane().add(bntPesquisaHospede, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 400, 200, -1));

        bntDesselecionarHospede.setText("Desselecionar Hospede");
        bntDesselecionarHospede.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntDesselecionarHospede.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDesselecionarHospedeActionPerformed(evt);
            }
        });
        getContentPane().add(bntDesselecionarHospede, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 270, 200, -1));

        bntLimparCampos.setText("Limpar Campos");
        bntLimparCampos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntLimparCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntLimparCamposActionPerformed(evt);
            }
        });
        getContentPane().add(bntLimparCampos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 500, 200, -1));

        bntSair.setText("Voltar/Julinha altere");
        bntSair.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bntSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSairActionPerformed(evt);
            }
        });
        getContentPane().add(bntSair, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 790, -1, -1));

        teste.setText("jToggleButton4");
        teste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testeActionPerformed(evt);
            }
        });
        getContentPane().add(teste, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 110, -1, -1));

        lblData.setText("Data:");
        getContentPane().add(lblData, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 10, -1, -1));

        lblDataHoje.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblDataHoje.setText("data check-in");
        getContentPane().add(lblDataHoje, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 10, 130, 20));

        lblAcompanhantes.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblAcompanhantes.setText("Acompanhantes");
        getContentPane().add(lblAcompanhantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, 140, -1));

        lblHospedes.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblHospedes.setText("Hospedes");
        getContentPane().add(lblHospedes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 90, -1));

        lblNomeHospede.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblNomeHospede.setText("Hospede Reserva:");
        getContentPane().add(lblNomeHospede, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 120, -1, -1));

        btnLimparAcompanhantes.setText("Limpar Tabela Acompanhantes");
        btnLimparAcompanhantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparAcompanhantesActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimparAcompanhantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 450, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPesquisarActionPerformed
        // TODO add your handling code here:
        pesquisar();
    }//GEN-LAST:event_bntPesquisarActionPerformed

    private void bntPesquisaHospedeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPesquisaHospedeActionPerformed
        // TODO add your handling code here:
        telaPesquisa.setVisible(true);
    }//GEN-LAST:event_bntPesquisaHospedeActionPerformed

    private void bntVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntVoltarActionPerformed
        // TODO add your handling code here:
        telaPesquisa.dispose();
    }//GEN-LAST:event_bntVoltarActionPerformed

    private void cmbTipoQuartoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoQuartoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTipoQuartoActionPerformed

    private void bntDesselecionarHospedeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDesselecionarHospedeActionPerformed
        // TODO add your handling code here:
        desselecionarHospede();
    }//GEN-LAST:event_bntDesselecionarHospedeActionPerformed

    private void bntLimparCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntLimparCamposActionPerformed
        // TODO add your handling code here:
        limparCampos();
    }//GEN-LAST:event_bntLimparCamposActionPerformed

    private void bntSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSairActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_bntSairActionPerformed

    private void bntRealizarCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntRealizarCheckInActionPerformed
        // TODO add your handling code here:
        criarCheckIn();
    }//GEN-LAST:event_bntRealizarCheckInActionPerformed

    private void btnAtualizarCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarCheckOutActionPerformed
        // TODO add your handling code here:
        preencherAtualizarTabelaReserva();
    }//GEN-LAST:event_btnAtualizarCheckOutActionPerformed

    private void bntRealizarCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntRealizarCheckOutActionPerformed
        // TODO add your handling code here:
        idSelecionado = -1;
        telaCheckOut.setVisible(true);
    }//GEN-LAST:event_bntRealizarCheckOutActionPerformed

    private void testeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testeActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_testeActionPerformed

    private void btnRealizarCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarCheckOutActionPerformed
        // TODO add your handling code here:
        fazerCheckOut();
    }//GEN-LAST:event_btnRealizarCheckOutActionPerformed

    private void btnSairCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairCheckOutActionPerformed
        // TODO add your handling code here:
        idSelecionado = -1;
        telaCheckOut.dispose();
    }//GEN-LAST:event_btnSairCheckOutActionPerformed

    private void btnLimparAcompanhantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparAcompanhantesActionPerformed
        // TODO add your handling code here:
        limparAcompanhantes();
    }//GEN-LAST:event_btnLimparAcompanhantesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerenciamentoCheckInCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerenciamentoCheckInCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerenciamentoCheckInCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerenciamentoCheckInCheckOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GerenciamentoCheckInCheckOut(cpfFuncionario, cpfHospede, passaporteHospede).setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntDesselecionarHospede;
    private javax.swing.JButton bntLimparCampos;
    private javax.swing.JButton bntPesquisaHospede;
    private javax.swing.JButton bntPesquisar;
    private javax.swing.JButton bntRealizarCheckIn;
    private javax.swing.JButton bntRealizarCheckOut;
    private javax.swing.JButton bntSair;
    private javax.swing.JButton bntVoltar;
    private javax.swing.JToggleButton btnAtualizarCheckOut;
    private javax.swing.JToggleButton btnDesselecionarHospede;
    private javax.swing.JToggleButton btnLimparAcompanhantes;
    private javax.swing.JToggleButton btnRealizarCheckOut;
    private javax.swing.JToggleButton btnSairCheckOut;
    private javax.swing.JComboBox<String> cmbNomeQuarto;
    private javax.swing.JComboBox<String> cmbPesquisa;
    private javax.swing.JComboBox<String> cmbTipoQuarto;
    private javax.swing.JLabel lblAcompanhantes;
    private javax.swing.JLabel lblCPF;
    private javax.swing.JLabel lblCampoPesquisa;
    private javax.swing.JLabel lblCheckInOculto;
    private javax.swing.JLabel lblCpfCheckOut;
    private javax.swing.JLabel lblCpfSelecionadoCheckOut;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDataCheckIn;
    private javax.swing.JLabel lblDataHoje;
    private javax.swing.JLabel lblHospede;
    private javax.swing.JLabel lblHospedeCheckOut;
    private javax.swing.JLabel lblHospedeCpf;
    private javax.swing.JLabel lblHospedePassaporte;
    private javax.swing.JLabel lblHospedeSelecionado;
    private javax.swing.JLabel lblHospedeSelecionadoCheckOut;
    private javax.swing.JLabel lblHospedes;
    private javax.swing.JLabel lblNomeHospede;
    private javax.swing.JLabel lblNomeQuartoOculto;
    private javax.swing.JLabel lblNumeroHospede;
    private javax.swing.JLabel lblNumeroQuarto;
    private javax.swing.JLabel lblPassaporte;
    private javax.swing.JLabel lblPassaporteSelecionadoCheckOut;
    private javax.swing.JLabel lblPassporteCheckOut;
    private javax.swing.JLabel lblRealizaCheckInCheckOut;
    private javax.swing.JLabel lblTipoQuarto;
    private javax.swing.JLabel lblTxtDataCheckIn;
    private javax.swing.JLabel lblTxtValorDiaria;
    private javax.swing.JLabel lblValorDiaria;
    private javax.swing.JLabel lblValorOculto;
    private javax.swing.JLabel lblValorPesquisa;
    private javax.swing.JScrollPane scpAcompanhantes;
    private javax.swing.JScrollPane scpHospedes;
    private javax.swing.JScrollPane scpReserva;
    private javax.swing.JTable tbAcompanhantes;
    private javax.swing.JTable tbHospedes;
    private javax.swing.JTable tbReserva;
    private javax.swing.JFrame telaCheckOut;
    private javax.swing.JFrame telaPesquisa;
    private javax.swing.JToggleButton teste;
    private javax.swing.JTextField txtNumeroHospedes;
    private javax.swing.JTextField txtValorPesquisa;
    // End of variables declaration//GEN-END:variables
    private void criarReserva() {
        TipoRepository tipoRepository = new TipoRepository();
        DatasUtil datasUtil = new DatasUtil();
        DefaultTableModel tabela = (DefaultTableModel) tbAcompanhantes.getModel();
        Set<Hospede> hospedes = new HashSet<>();

        String cpfFuncionario = getCpfFuncionario();
        byte numeroHospedesNumero;
        int idQuarto = tipoService.buscarIdQuarto((String) cmbNomeQuarto.getSelectedItem());
        String nome = lblHospede.getText();
        String numeroHospedes = txtNumeroHospedes.getText();
        String nomeQuarto = (String) cmbNomeQuarto.getSelectedItem();
        Date dataCheckIn = datasUtil.converterStringParaDataHoras(lblTxtDataCheckIn.getText());
        int rowCount = tabela.getRowCount();

        Funcionario funcionario = tipoRepository.buscarPorCPFFuncionario(cpfFuncionario);
        Quarto quarto = tipoRepository.buscarPorIdQuarto(idQuarto);

        try {
            numeroHospedesNumero = Byte.parseByte(numeroHospedes);

        } catch (NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O campo NUMERO DE HOSPEDES deve ser um número válido.");
            System.out.println("O campo NUMERO DE HOSPEDES deve ser um número válido." + e.getMessage());
            return;
        }

        System.out.println(rowCount);
        for (int i = 0; i < rowCount; i++) {
            Object value = tabela.getValueAt(i, 0);
            System.out.println(value);
            Hospede hospede = tipoRepository.buscarPorIdHospede((Integer) value);
            hospedes.add(hospede);
        }

        Reserva reserva = new Reserva(funcionario, quarto, nome, numeroHospedesNumero, nomeQuarto, true, dataCheckIn, null);
        reserva.setHospede(hospedes);
        tipoService.salvarReserva(reserva);
        limparAcompanhantes();    
    }

    private void criarReservaDespesa(boolean gasto) {
        TipoRepository tipoRepository = new TipoRepository();
        DatasUtil datasUtil = new DatasUtil();

        double valorDiariaNumero;
        int idReserva = tipoService.buscarIdReserva(lblCPF.getText(), lblPassaporte.getText());
        String nome = lblHospede.getText();
        String produto = tipoService.obterNomeProdutoPorTipo((String) cmbTipoQuarto.getSelectedItem());
        String valorDiaria = lblTxtValorDiaria.getText();
        Date dataCheckIn = datasUtil.converterStringParaDataHoras(lblTxtDataCheckIn.getText());

        Reserva reserva = tipoRepository.buscarReservaPorId(idReserva);
        ProdutoEServico produtoEServico = tipoRepository.buscarPorNomeProduto(produto);

        try {
            valorDiariaNumero = Double.parseDouble(valorDiaria);

        } catch (NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O campo VALOR DIARIA deve ser um número válido.");
            System.out.println("O campo VALOR DIARIA ou Total deve ser um número válido." + e.getMessage());
            return;
        }

        ReservaDespesa reservaDespesa = new ReservaDespesa(reserva, produtoEServico, nome, produto, dataCheckIn, 1, valorDiariaNumero, valorDiariaNumero);
        tipoService.salvarReservaDespesa(reservaDespesa, reserva, gasto);
        tipoService.mudarStatusQuarto((String) cmbNomeQuarto.getSelectedItem(), true);
    }

    private void criarReservaDespesaCheckOut(Date consumo, boolean gasto) {
        TipoRepository tipoRepository = new TipoRepository();
        double valorDiariaNumero;
        int idReserva = tipoService.buscarIdReserva(lblCPF.getText(), lblPassaporteSelecionadoCheckOut.getText());
        String nome = lblHospedeSelecionadoCheckOut.getText();
        String produto = lblNomeQuartoOculto.getText();
        String valorDiaria = lblValorOculto.getText();
        Date dataConsumo = consumo;
        double total = tipoService.ultimoTotal(idReserva);

        Reserva reserva = tipoRepository.buscarReservaPorId(idReserva);
        ProdutoEServico produtoEServico = tipoRepository.buscarPorNomeProduto(produto);

        try {
            valorDiariaNumero = Double.parseDouble(valorDiaria);

        } catch (NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O campo VALOR DIARIA deve ser um número válido.");
            System.out.println("O campo VALOR DIARIA deve ser um número válido." + e.getMessage());
            return;
        }
        double valorSoma = total + valorDiariaNumero;
        ReservaDespesa reservaDespesa = new ReservaDespesa(reserva, produtoEServico, nome, produto, dataConsumo, 1, valorDiariaNumero, valorSoma);
        tipoService.salvarReservaDespesa(reservaDespesa, reserva, gasto);
    }

    private void criarCheckIn() {
        if (getIdSelecionado() < 0) {

        } else {
            criarReserva();
            criarReservaDespesa(true);
        }
    }

    private void pesquisar() {
        FormatoStringUtil formatoStringUtil = new FormatoStringUtil();
        String campo = (String) cmbPesquisa.getSelectedItem();
        String valor = txtValorPesquisa.getText();
        if (campo.equals("Id") || campo.equals("CPF")) {
            try {
                int id = Integer.parseInt(valor);
                int cpf = Integer.parseInt(formatoStringUtil.pegaNumeroDaString(valor));

            } catch (NumberFormatException e) {
                if (campo.equals("Id")) {
                    JOptionPane.showMessageDialog(null, "O campo de pesquisa ID possui um caractere invalido.");

                } else if (campo.equals("CPF")) {
                    JOptionPane.showMessageDialog(null, "O campo de pesquisa CPF possui um caractere invalido.");

                }
                System.out.println("O campo Id não aceita Letra e o Campo Numero de camas não aceita numero maior que 128" + e.getMessage());
                return;
            }
        }
        tipoService.pesquisaHospede(campo, valor, tbHospedes);
    }

    private void selecionarHospede() {
        tbHospedes.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!isClikado()) {
                    if (e.getClickCount() == 2) {
                        int index = tbHospedes.getSelectedRow();
                        if (index != -1) {
                            idSelecionado = (int) tbHospedes.getValueAt(index, 0);
                            Hospede hospede = tipoService.retornaIdHospede(getIdSelecionado());
                            lblHospede.setText(hospede.getNome());
                            lblCPF.setText(hospede.getCpf());
                            lblPassaporte.setText(hospede.getPassaporte());
                            preencherAtualizarTabelaAcompanhantes(getIdSelecionado());
                            setClikado(true);
                        }
                    }
                } else {
                    if (e.getClickCount() == 2) {
                        int index = tbHospedes.getSelectedRow();
                        if (index != -1) {
                            idSelecionado = (int) tbHospedes.getValueAt(index, 0);
                            preencherAtualizarTabelaAcompanhantes(getIdSelecionado());
                        }
                    }
                }
            }
        });
    }

    private void fazerCheckOut() {
        if (getIdSelecionado() < 0) {

        } else {
            DatasUtil datasUtil = new DatasUtil();
            Date checkIn = tipoService.buscarPorCheckIn(lblCpfSelecionadoCheckOut.getText(), lblPassaporteSelecionadoCheckOut.getText());
            Date checkOut = datasUtil.converterStringParaDataHoras(lblDataHoje.getText());
            //Date checkOut = datasUtil.converterStringParaDataHoras("15/06/2024");
            long dataDiferenca = datasUtil.compararDatas(checkIn, checkOut);
            for (int i = 1; i <= dataDiferenca; i++) {
                List<LocalDate> listaDatas = datasUtil.obterDiferencaDatas(checkIn, checkOut);
                Date consumo = datasUtil.converterLocalDateToDate(listaDatas.get(i));
                criarReservaDespesaCheckOut(consumo, true);
            }
            tipoService.mudarStatusReserva(lblCpfSelecionadoCheckOut.getText(), lblPassaporteSelecionadoCheckOut.getText());
            tipoService.mudarStatusQuarto(tipoService.buscarNomeQuartoPorHospedeId(lblCpfSelecionadoCheckOut.getText(), lblPassaporteSelecionadoCheckOut.getText()), false);
        }
    }

    private void selecionarHospedeCheckOut() {
        tbReserva.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                DatasUtil datasUtil = new DatasUtil();
                if (e.getClickCount() == 2) {
                    int index = tbReserva.getSelectedRow();
                    if (index != -1) {
                        idSelecionado = (int) tbReserva.getValueAt(index, 0);
                        Hospede hospede = tipoService.retornaIdHospede(getIdSelecionado());
                        lblHospedeSelecionadoCheckOut.setText(hospede.getNome());
                        lblCpfSelecionadoCheckOut.setText(hospede.getCpf());
                        lblPassaporteSelecionadoCheckOut.setText(hospede.getPassaporte());
                        lblNomeQuartoOculto.setText(tipoService.obterNomeProdutoPorTipo(tipoService.buscarNomeQuartoPorTipo(hospede.getCpf(), hospede.getPassaporte())));
                        lblValorOculto.setText(String.valueOf(tipoService.buscarValorProduto(tipoService.obterNomeProdutoPorTipo(tipoService.buscarNomeQuartoPorTipo(hospede.getCpf(), hospede.getPassaporte())))));
                        lblCheckInOculto.setText(datasUtil.converterDataParaString(tipoService.buscarPorCheckIn(hospede.getCpf(), hospede.getPassaporte()), "dd/MM/yyyy"));
                    }
                }
            }
        });
    }

    private void desselecionarHospede() {
        lblHospede.setText("");
        lblCPF.setText("");
        lblPassaporte.setText("");
        setClikado(false);
        idSelecionado = -1;
    }

    private void limparAcompanhantes() {
        DefaultTableModel tabela = (DefaultTableModel) tbAcompanhantes.getModel();
        tabela.setRowCount(0);
        desselecionarHospede();
    }

    private void limparCampos() {
        lblTxtValorDiaria.setText("");
        cmbTipoQuarto.setSelectedIndex(0);
        cmbNomeQuarto.setSelectedIndex(0);
    }

    private JComboBox<String> getComboBoxColunas(JComboBox<String> comboBox) {
        comboBox.removeAllItems();

        for (int i = 0; i < getTbHospedes().getColumnCount(); i++) {
            String nomeColuna = getTbHospedes().getColumnName(i);
            comboBox.addItem(nomeColuna);
        }
        return comboBox;
    }

    private void preencherAtualizarTabela() {
        tipoService.preencherTabelaHospedeCheckIn(tbHospedes);
    }

    private void preencherAtualizarTabelaReserva() {
        tipoService.preencherTabelaReserva(tbReserva);
    }

    private void preencherAtualizarTabelaAcompanhantes(int id) {
        tipoService.preencherTabelaHospedeListaTelaCheckIn(tbAcompanhantes, id);
    }

    private JTable getTbHospedes() {
        return tbHospedes;
    }

    private int getIdSelecionado() {
        return idSelecionado;
    }

    private void preencherComboBoxPesquisa() {
        cmbPesquisa = getComboBoxColunas(cmbPesquisa);
    }

    private void preencherComboBoxTipoQuarto() {
        tipoService.preencherComboBoxTipoQuarto(cmbNomeQuarto, cmbTipoQuarto);
    }

    private void preencheComboBoxNomeQuarto() {
        tipoService.buscarPrecoPorTipoDeQuarto(cmbNomeQuarto, lblTxtValorDiaria);
    }

    private void obtemDataCheckIn() {
        DatasUtil datasUtil = new DatasUtil();
        lblTxtDataCheckIn.setText(datasUtil.converterDataParaString(datasUtil.obtemDataHoje(lblTxtDataCheckIn), "dd/MM/yyyy"));
    }

    private void obtemDataHoje() {
        DatasUtil datasUtil = new DatasUtil();
        lblDataHoje.setText(datasUtil.converterDataParaString(datasUtil.obtemDataHoje(lblDataHoje), "dd/MM/yyyy"));
    }

    public boolean isClikado() {
        return clikado;
    }

    public void setClikado(boolean clikado) {
        this.clikado = clikado;
    }

    public static String getCpfFuncionario() {
        return cpfFuncionario;
    }

    public static void setCpfFuncionario(String cpfFuncionario) {
        GerenciamentoCheckInCheckOut.cpfFuncionario = cpfFuncionario;
    }

    public void verificarCpf(String cpfFuncionario) {
        if (cpfFuncionario == null) {
            JOptionPane.showInternalMessageDialog(null, "Erro o Cpf de funcionario esta nulo. Tente relogar.");
            throw new IllegalArgumentException("CPF esta nulo");
        }
    }

    public int getIdAcompanhanteSelecionado() {
        return idAcompanhanteSelecionado;
    }

    public void setIdAcompanhanteSelecionado(int idAcompanhanteSelecionado) {
        this.idAcompanhanteSelecionado = idAcompanhanteSelecionado;
    }
}